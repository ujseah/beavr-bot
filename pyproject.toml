[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[project]
name = "beavr"
version = "1.0.0"
description = "BeaVR-Bot: Bimanual, multi-Embodiment, Accessible, Virtual Reality Teleoperation System for Robots"
authors = [
    { name = "BeaVR Team", email = "team@beavr.ai" },
]
readme = "README.md"
license = { text = "Apache-2.0" }
requires-python = ">=3.10,<4.0"
keywords = ["robotics", "deep learning", "pytorch", "teleoperation", "vr"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "Topic :: Software Development :: Build Tools",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.10",
]
dependencies = [
    # Core shared dependencies (LeRobot compatible)
    "typing_extensions>=4.9.0",
    "datasets>=2.19.0,<=3.6.0",
    "huggingface-hub[hf-transfer,cli]>=0.27.1",
    "draccus==0.10.0",
    "einops>=0.8.0",
    "deepdiff>=7.0.1",
    "diffusers>=0.27.2",
    "imageio[ffmpeg]>=2.34.0",
    "jsonlines>=4.0.0",
    "numba>=0.59.0",
    "omegaconf>=2.3.0",
    "av>=14.2.0",
    "termcolor>=2.4.0",
    "wandb>=0.16.3",
    "zarr>=2.17.0",
    "gymnasium==0.29.1",
    "packaging>=24.2",
    "pyzmq>=26.2.1",
    "rerun-sdk>=0.21.0",
    "pynput>=1.7.7",
    "pyserial>=3.5",
    "pymunk>=6.6.0,<7.0.0",

    # OpenCV - CRITICAL: Use headless to match LeRobot
    "opencv-python-headless>=4.9.0",

    # PyTorch - NOTE: Install via conda for CUDA support
    "torch>=2.2.1",
    "torchvision>=0.21.0",
    "torchcodec>=0.2.1; sys_platform != 'win32' and (sys_platform != 'linux' or (platform_machine != 'aarch64' and platform_machine != 'arm64' and platform_machine != 'armv7l')) and (sys_platform != 'darwin' or platform_machine != 'x86_64')",

    # BeaVR-specific dependencies
    "blosc>=1.11.1",  # Data compression for network utilities
    "flask>=3.0.3",
    "gevent",
    "gunicorn",
    "h5py>=3.10.0",
    "hydra-core>=1.3.2",
    "matplotlib>=3.8.2",
    "pandas>=2.1.3",
    "pillow>=10.1.0",
    "pybullet>=3.2.6",
    "pyrealsense2>=2.54.2.5684",
    "pyyaml>=6.0.1",
    "scipy>=1.15.2",
    "tqdm>=4.67.1",
    "gdown>=5.1.0",
    "transformers",

    # Robot-specific dependencies
    "ikpy",
    "shapely",
    "rospkg",
    "xarm-python-sdk",
    "dynamixel-sdk",
]

[project.optional-dependencies]
# Development tools
dev = [
    "pytest>=8.1.0",
    "pytest-timeout>=2.4.0",
    "pytest-cov>=5.0.0",
    "black",
    "isort",
    "pre-commit>=3.7.0",
]

# LeRobot integration (for using LeRobot alongside BeaVR)
lerobot = [
    "lerobot>=0.1.0",
]

# Full teleoperation stack
teleop = [
    "pygame>=2.5.1",
    "hidapi>=0.14.0",
]

[project.urls]
homepage = "https://github.com/arc-beavr/beavr-bot"
issues = "https://github.com/arc-beavr/beavr-bot/issues"

[tool.poetry]
requires-poetry = ">=2.1"
packages = [
    { include = "beavr", from = "src" }
]

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.2"
pytest-timeout = "^2.4.0"
pytest-cov = "^7.0.0"
black = "^25.1.0"
isort = "^6.0.1"
pre-commit = "^4.3.0"
debugpy = "^1.8.16"

[tool.ruff]
target-version = "py310"
line-length = 110
exclude = ["tests/artifacts/**/*.safetensors", "*_pb2.py", "*_pb2_grpc.py"]

[tool.ruff.lint]
# E, W: pycodestyle errors and warnings
# F: PyFlakes
# I: isort
# UP: pyupgrade
# B: flake8-bugbear (good practices, potential bugs)
# C4: flake8-comprehensions (more concise comprehensions)
# A: flake8-builtins (shadowing builtins)
# SIM: flake8-simplify
# RUF: Ruff-specific rules
# D: pydocstyle (for docstring style/formatting)
# S: flake8-bandit (some security checks, complements Bandit)
# T20: flake8-print (discourage print statements in production code)
# N: pep8-naming
# TODO: Uncomment rules when ready to use
select = [
    "E", "W", "F", "I", "B", "C4", "T20", "N" # "SIM", "A", "S", "D", "RUF", "UP"
]
ignore = [
    "E501", # Line too long
    "T201", # Print statement found
    "T203", # Pprint statement found
    "B008", # Perform function call in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ["lerobot"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
